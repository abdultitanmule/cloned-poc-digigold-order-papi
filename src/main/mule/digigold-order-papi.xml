<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:validation="http://www.mulesoft.org/schema/mule/validation"
	xmlns:os="http://www.mulesoft.org/schema/mule/os" xmlns:sftp="http://www.mulesoft.org/schema/mule/sftp" xmlns:json-logger="http://www.mulesoft.org/schema/mule/json-logger" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:apikit="http://www.mulesoft.org/schema/mule/mule-apikit" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/sftp http://www.mulesoft.org/schema/mule/sftp/current/mule-sftp.xsd http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd http://www.mulesoft.org/schema/mule/mule-apikit http://www.mulesoft.org/schema/mule/mule-apikit/current/mule-apikit.xsd http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd 
http://www.mulesoft.org/schema/mule/json-logger http://www.mulesoft.org/schema/mule/json-logger/current/mule-json-logger.xsd
http://www.mulesoft.org/schema/mule/os http://www.mulesoft.org/schema/mule/os/current/mule-os.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd">
     <flow name="digigold-order-papi-main">
        <http:listener config-ref="apiHttpListenerConfig" path="${https.path}">

            <http:response statusCode="#[vars.httpStatus default 200]">
                <http:headers><![CDATA[#[vars.outboundHeaders default {}]]]></http:headers>
            </http:response>
            <http:error-response statusCode="#[vars.httpStatus default 500]">
                <http:body><![CDATA[#[payload]]]></http:body>
                <http:headers><![CDATA[#[vars.outboundHeaders default {}]]]></http:headers>
            </http:error-response>
        </http:listener>

        <ee:transform doc:name="captureCommonHeaders" doc:id="58960ffa-0250-438a-98b7-4ce9ed6fd8e5" >
			<ee:message >
				
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="sourceChannel" ><![CDATA[%dw 2.0
output application/java
---
attributes.headers.'x-source-channel'
]]></ee:set-variable>
				<ee:set-variable variableName="inboundUri" ><![CDATA[%dw 2.0
output application/java
---
attributes.requestUri
]]></ee:set-variable>
				<ee:set-variable variableName="httpMethod" ><![CDATA[%dw 2.0
output application/java
---
attributes.method
]]></ee:set-variable>
				<ee:set-variable variableName="correlationId" ><![CDATA[%dw 2.0
output application/java
---
attributes.headers.'X-Correlation-Id']]></ee:set-variable>
				<ee:set-variable variableName="targetChannel"><![CDATA[%dw 2.0
output application/java
---
attributes.headers."x-target-channel"]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<apikit:router config-ref="digigold-order-papi-config" />
		<error-handler ref="api-main-error-handler" />
    </flow>
    <flow name="digigold-order-papi-console">
        <http:listener config-ref="apiHttpListenerConfig" path="/console/*">
            <http:response statusCode="#[vars.httpStatus default 200]">
                <http:headers><![CDATA[#[vars.outboundHeaders default {}]]]></http:headers>
            </http:response>
            <http:error-response statusCode="#[vars.httpStatus default 500]">
                <http:body><![CDATA[#[payload]]]></http:body>
                <http:headers><![CDATA[#[vars.outboundHeaders default {}]]]></http:headers>
            </http:error-response>
        </http:listener>
        <apikit:console config-ref="digigold-order-papi-config" />
		<error-handler ref="api-console-error-handler" />
    </flow>
    <flow name="post:\reports:application\json:digigold-order-papi-config">
        <json-logger:logger doc:name="start log" doc:id="ef9be23d-4230-4da1-aade-9538032fac5b" config-ref="JSON_Logger_Config" message="start log - generate oracle report" category="${log.category}"/>
		<ee:transform doc:name="Set start and end date" doc:id="4ce6c21e-e604-4358-809d-5fa91239146f">
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
import p from Mule
output application/json
---
{
  reportType: attributes.headers."report-name",
  variables:{
	"startDate": payload.date as Date as String {format: p('dateformat.startdateformat')},
	"endDate": payload.date as Date as String {format: p('dateformat.enddateformat')}
	}
}



]]></ee:set-payload>
			</ee:message>
			<ee:variables>
			</ee:variables>
		</ee:transform>
		<try doc:name="Try" doc:id="7998354a-5051-45d5-a25a-68ebc3aedcb6" >
			<validation:is-true doc:name="Validate reportType" doc:id="cfdb5fc7-b930-407d-9ed5-d1ae5096954e" expression="#[payload.reportType == p('reports.oracleReport.reportType')]" message="Invalid Report Type" />
			<error-handler >
				<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="48a2374e-e81f-4827-9163-94f9157e2943" >
					<ee:transform doc:name="Set Error Payload" doc:id="2dc5a0e5-3f95-481c-8515-bc97e1f23003" >
						<ee:message >
							<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	"transactionId": correlationId,
	"errorCode": vars.errorCode default error.errorType.identifier,
	"errorMessage": vars.errorMessage default error.description,
	"errorDescription": error.errorDescription default error.detailedDescription,
	"timestamp" : now()
}]]></ee:set-payload>
						</ee:message>
					</ee:transform>
				</on-error-propagate>
			</error-handler>
		</try>
		<flow-ref doc:name="call to impl-generate-oracle-report" doc:id="657a0273-e945-40f5-92e2-ccdd432acf7f" name="impl-generate-oracle-report"/>
		<ee:transform doc:name="set successful response" doc:id="d526ade2-6b9a-4244-9e44-3049355433b1" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
  "status": "SUCCESS",
  "message": "Oracle report generation process triggered successfully"
}]]></ee:set-payload>
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="httpStatus" ><![CDATA[202]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<json-logger:logger doc:name="end log" doc:id="320ca9be-2df2-4319-865b-8c05012d9b9d" config-ref="JSON_Logger_Config" message="end log - generate oracle report" category="${log.category}">
			<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
   // payload: JSONLoggerModule::stringifyNonJSON(payload) 
}]]]></json-logger:content>
		</json-logger:logger>
    </flow>
	<flow name="get:\transactions:digigold-order-papi-config">
		<json-logger:logger doc:name="START of fetch transactions flow" doc:id="6aca92d5-8a03-4519-9f70-213423aee697" config-ref="JSON_Logger_Config" message="START of fetch transactions flow" category="${log.category}" />
		<flow-ref doc:name="impl-fetch-transactions-flow" doc:id="e65c27fe-657a-4c46-a832-b3f3e35d002b" name="impl-fetch-transactions-flow"/>
		<json-logger:logger doc:name="END of fetch transactions flow" doc:id="e07cdaa3-9021-4c89-bc19-3629160579aa" config-ref="JSON_Logger_Config" message="END of fetch transactions flow" category="${log.category}" tracePoint="END">
			<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
   // payload: JSONLoggerModule::stringifyNonJSON(payload) 
}]]]></json-logger:content>
		</json-logger:logger>
    </flow>
	<flow name="post:\transactions:application\json:digigold-order-papi-config">
		<json-logger:logger doc:name="START of create transactions flow" doc:id="c2f399b7-6393-4eab-9f46-b62ed5818b01" config-ref="JSON_Logger_Config" message="START of create transactions flow" category="${log.category}">
			<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    //payload: JSONLoggerModule::stringifyNonJSON(payload) 
}]]]></json-logger:content>
		</json-logger:logger>
		<flow-ref doc:name="impl-create-transactions-flow" doc:id="d7ab65c2-38f1-49e0-a68c-483ad8e2a509" name="impl-create-transactions-flow"/>
		<json-logger:logger doc:name="END of create transactions flow" doc:id="d3ffdb01-f771-429d-92bd-f2ed1e96d4e6" config-ref="JSON_Logger_Config" message="END of create transactions flow" tracePoint="END" category="${log.category}" >
			<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
   // payload: JSONLoggerModule::stringifyNonJSON(payload) 
}]]]></json-logger:content>
		</json-logger:logger>
    </flow>
	<flow name="digigold-order-transaction-migration" doc:id="3ad5e209-012f-41bf-8def-3f0557e8e937">
		<scheduler doc:name="TxnMigrationScheduler" doc:id="34477e24-0c58-440d-bd22-62168d30898a" >
			<scheduling-strategy >
				<cron expression="${scheduler.transactionMigrationSchedule}" timeZone="${scheduler.timeZone}" />
			</scheduling-strategy>
		</scheduler>
		<json-logger:logger doc:name="START Log" doc:id="9d0a9dc0-096f-43b1-9086-26be7d0ad2c2" config-ref="JSON_Logger_Config" message='"Starting Digigold Migration Process. Start Timestamp is: " ++ now()' category="${log.category}">
			<json-logger:content><![CDATA[#[import modules::JSONLoggerModule output application/json skipNullOn = "everywhere" ---
{
	eventContext: {
	businessID: "${global.properties.businessId}",
	clientId: attributes.headers.'x-source-channel', // Change accordingly
	inboundURI: attributes.requestUri,
	method: attributes.method,
	muleCorrelationId: vars.muleCorrelationId,
	
}
  //payload: JSONLoggerModule::stringifyNonJSON(payload)
  //Optional - DO NOT LOG whole payload as it will be huge. Log it only when necessary;
  //No sensitive information should be logged in plain text
}]]]></json-logger:content>
		</json-logger:logger>
		<flow-ref doc:name="impl-transaction-migration" doc:id="7f79b139-96ab-4f4a-947f-4dc55cb533e1" name="impl-transaction-migration" />
		<error-handler ref="reports-global-error-handler" />
	</flow>
	<flow name="digigold-order-daily-oracle-report-generation" doc:id="ba577b05-b621-4a76-824d-a6f264fb9964">
		<scheduler doc:name="Scheduler" doc:id="36145a30-6fe7-4b75-a291-35296901e394">
			<scheduling-strategy>
				<cron expression="${scheduler.oracleReportGeneration}" timeZone="${scheduler.timeZone}" />
			</scheduling-strategy>
		</scheduler>
		<ee:transform doc:name="Set start , end date and reportType" doc:id="fe32a1f0-d7bb-424b-842b-53b7d1ac46a9">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
import p from Mule

import * from dw::core::Dates
---
{
  variables:{
	"startDate": ((now() >> 'IST') as Date - |P1D|) as String {format: p('dateformat.startdateformat')},
	"endDate": ((now() >> 'IST') as Date - |P1D|) as String {format: p('dateformat.enddateformat')}

	},
  reportType: p('reports.oracleReport.reportType')
}


]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<choice doc:name="Choice" doc:id="146d42a2-3463-4f1b-92a3-815f33760cb1" >
			<when expression="#[%dw 2.0&#10;output application/json&#10;import * from dw::core::Dates&#10;---&#10;today() as Date as String{format: 'ddMM'} == p('reports.oracleReport.reportOSresetDate')  //Every 1st of April the OS is cleared.]">
				<os:clear doc:name="Clear Object Store on 1st April Every year" doc:id="c7869ad9-76d8-4e4e-8325-7cf65108bea8" objectStore="reportNameObjectStore"/>
				<json-logger:logger doc:name="Flow Logger" doc:id="b1304a98-b128-430a-b25f-889318e53547" config-ref="JSON_Logger_Config" message="Report Name Object Store successfully cleared" tracePoint="FLOW" category="${log.category}">
					<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json skipNullOn = "everywhere" ---
{
	eventContext: {
	businessID: "${global.properties.businessId}",
	muleCorrelationId: vars.muleCorrelationId,
	logMessage: "Report Name Object Store successfully cleared"
	
}
  
}]]]></json-logger:content>
				</json-logger:logger>
			</when>
			<otherwise >
				<json-logger:logger doc:name="Flow Logger" doc:id="eed9accf-5b17-4efd-a117-35e975e9ce4a" config-ref="JSON_Logger_Config" message="Skip clearing Object Store" tracePoint="FLOW" category="${log.category}">
					<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json skipNullOn = "everywhere" ---
{
	eventContext: {
	businessID: "${global.properties.businessId}",
	muleCorrelationId: vars.muleCorrelationId,
	logMessage: "Skipped clearing Report Name Object Store."
	
}
  
}]]]></json-logger:content>
				</json-logger:logger>
			</otherwise>
		</choice>
		<flow-ref doc:name="call to impl-generate-oracle-report" doc:id="93368b82-3091-40a7-b199-6e2b1a71dc9e" name="impl-generate-oracle-report" />
	</flow>
	<flow name="digigold-order-daily-droporder-report-generation" doc:id="50127e70-92a4-4fc2-a3ad-4e3767d3201f">
		<scheduler doc:name="DropOrderScheduler" doc:id="b13ff88c-8594-4ee2-a195-0c732573038d" >
			<scheduling-strategy >
				<cron expression="${scheduler.dropOrderReportGeneration}" timeZone="${scheduler.timeZone}" />
			</scheduling-strategy>
		</scheduler>
		<os:retrieve doc:name="dropOrderReportlastEvaluatedKey" doc:id="4ee7342c-55b8-4908-972d-2a9c9c10d57a" key="dropOrderReportlastEvaluatedKey" target="dropOrderReportlastEvaluatedKey" objectStore="reportNameObjectStore">
			<os:default-value ><![CDATA[#["Undefined"]]]></os:default-value>
		</os:retrieve>
		<ee:transform doc:name="Pass drop Order Report Data" doc:id="d1a41c60-0a33-437c-bcd3-9465be28de85" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
import * from dw::core::Dates
import p from Mule
output application/json
var currentDay = (now() >> 'IST')
fun nullCheck(data) = if(data != null and data != "") true else false
---
{
	"reportType":p('reports.dropOrderReport.reportType'),
  	"variables":
	 {
		"startDate": if (nullCheck(p('reports.dropOrderReport.StartDate'))) p('reports.dropOrderReport.StartDate') else (currentDay as Date - |P2M|) as String {format: p('dateformat.startdateformat')},
		"endDate": if (nullCheck(p('reports.dropOrderReport.EndDate'))) p('reports.dropOrderReport.EndDate') else (currentDay as Date - |P1D|) as String {format: p('dateformat.enddateformat')}
	 },
	"dynamodbFetchCount": 0,
	"batchCount": 1,
	"count": 0,
	("lastEvaluatedKey": vars.dropOrderReportlastEvaluatedKey) if(vars.dropOrderReportlastEvaluatedKey != "Undefined")

}	
	]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<flow-ref doc:name="impl-generate-reports" doc:id="a2cce765-441f-4453-bf08-c33b8c8df177" name="impl-generate-reports" />
		<json-logger:logger doc:name="Logger" doc:id="07d30d46-6873-4a91-8c27-9f2da776c08b" config-ref="JSON_Logger_Config" tracePoint="END" message="Completion of the Drop order trigger process" category="${log.category}"/>
		<error-handler ref="reports-global-error-handler" />
	</flow>
	<flow name="digigold-order-daily-transaction-report-generation" doc:id="24913856-977d-4638-8af8-59f0aaba55c0">
		<scheduler doc:name="TransactionReportScheduler" doc:id="2fbe7215-b3fd-4ff6-bcc2-767b88a05743" >
			<scheduling-strategy >
				<cron expression="${scheduler.transactionReportGeneration}" timeZone="${scheduler.timeZone}" />
			</scheduling-strategy>
		</scheduler>
		<os:retrieve doc:name="transactionReportlastEvaluatedKey" doc:id="3bffb7f1-90ef-486e-bf3e-0c044f26c6b1" key="transactionReportlastEvaluatedKey" target="transactionReportlastEvaluatedKey" objectStore="reportNameObjectStore">
			<os:default-value ><![CDATA[#["Undefined"]]]></os:default-value>
		</os:retrieve>
		<ee:transform doc:name="Pass Transaction report Data" doc:id="16d48fb1-96d0-49db-b595-3f9a17fe6b89" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
import * from dw::core::Dates
import p from Mule
output application/json
var currentDay = (now() >> 'IST')
fun nullCheck(data) = if(data != null and data != "") true else false
---
{
	"reportType":p('reports.transactionReport.reportType'),
	"variables":
	{
	"startDate": if (nullCheck(p('reports.transactionReport.StartDate'))) p('reports.transactionReport.StartDate') else (currentDay as Date - |P2M|) as String {format: p('dateformat.startdateformat')},
	"endDate": if (nullCheck(p('reports.transactionReport.EndDate'))) p('reports.transactionReport.EndDate') else (currentDay as Date - |P1D|) as String {format: p('dateformat.enddateformat')}
	},
	"dynamodbFetchCount": 0,
	"batchCount": 1,
	"count": 0,
	("lastEvaluatedKey": vars.transactionReportlastEvaluatedKey) if(vars.transactionReportlastEvaluatedKey != "Undefined")
}
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<flow-ref doc:name="impl-generate-reports" doc:id="bb206e3b-7480-4908-8b39-61854e2bf457" name="impl-generate-reports" />
		<json-logger:logger doc:name="Logger" doc:id="285dcdcb-ae44-4036-9416-1d53cc5dd84d" config-ref="JSON_Logger_Config" message="Completion of the Drop order trigger process" tracePoint="END" category="${log.category}" />
		<error-handler ref="reports-global-error-handler" />
	</flow>
	<flow name="digigold-order-fortnightly-transaction-consolidated-report-generation" doc:id="23fda268-7e03-4bff-ad8a-a5fd9f069adc">
		<scheduler doc:name="TransactionConsolidatedReportScheduler" doc:id="20fc7d22-3722-4ca0-bdad-28c25fc84a69" >
			<scheduling-strategy >
				<cron expression="${scheduler.transactionConsolidatedReportGeneration}" timeZone="${scheduler.timeZone}" />
			</scheduling-strategy>
		</scheduler>
		<os:retrieve doc:name="transactionConsolidatedReportlastEvaluatedKey" doc:id="5fc67db8-f4ed-4d31-9821-e899a9a14983" key="transactionConsolidatedReportlastEvaluatedKey" target="transactionConsolidatedReportlastEvaluatedKey" objectStore="reportNameObjectStore">
			<os:default-value ><![CDATA[#["Undefined"]]]></os:default-value>
		</os:retrieve>
		<ee:transform doc:name="Pass transaction consolidated report data" doc:id="4978b704-b9dc-442b-8f2f-0d7525352012" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
import * from dw::core::Dates
import p from Mule
output application/json
var currentDay = (now() >> 'IST')
fun nullCheck(data) = if(data != null and data != "") true else false
---
{
	"reportType":p('reports.transactionConsolidatedReport.reportType'),
	"variables":
	{
	"startDate": if (nullCheck(p('reports.transactionConsolidatedReport.StartDate'))) p('reports.transactionConsolidatedReport.StartDate') else (currentDay as Date - |P5Y|) as String {format: p('dateformat.startdateformat')},
	"endDate": if (nullCheck(p('reports.transactionConsolidatedReport.EndDate'))) p('reports.transactionConsolidatedReport.EndDate') else (currentDay as Date - |P1D|) as String {format: p('dateformat.enddateformat')}
	},
	"dynamodbFetchCount": 0,
	"batchCount": 1,
	"count": 0,
	("lastEvaluatedKey": vars.transactionConsolidatedReportlastEvaluatedKey) if(vars.transactionConsolidatedReportlastEvaluatedKey != "Undefined")
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<flow-ref doc:name="impl-generate-reports" doc:id="a25abaaf-89f1-4d8f-b440-792da3f36c90" name="impl-generate-reports" />
		<json-logger:logger doc:name="Logger" doc:id="9a8313c5-631d-43f5-b002-a22c75e90567" config-ref="JSON_Logger_Config" message="Completion of the Drop order trigger process" tracePoint="END" category="${log.category}" />
		<error-handler ref="reports-global-error-handler" />
	</flow>

</mule>
