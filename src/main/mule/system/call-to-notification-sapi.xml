<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:json-logger="http://www.mulesoft.org/schema/mule/json-logger"
	xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd 
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/json-logger http://www.mulesoft.org/schema/mule/json-logger/current/mule-json-logger.xsd">
	<sub-flow name="call-notification-service" doc:id="34bda21c-f7f3-441f-9137-713f286e3548" >
		<parse-template doc:name="Parse Template - HTML EMAIL" doc:id="19d3a496-39de-4d21-825a-473ee10d2643" location="templates/technical-notification-template.html" target="emailTemplate" targetValue="#[payload]" />
		<ee:transform doc:name="Prepare notification payload" doc:id="19121a79-87c0-4edc-b6a3-a64cf8c68839">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
import toBase64 from dw::core::Binaries
---
{
  from: p('reportsEmail.from'),
  (to: (p('reportsEmail.to') splitBy  "," ) )  if (!isEmpty(p('reportsEmail.to')) ),  
  (cc: (p('reportsEmail.cc') splitBy  "," ) )  if (!isEmpty(p('reportsEmail.cc')) ),  				
  subject:  vars.emailSubject ++ p('env') ++ " - " ++ (now() as Date),
  body: vars.emailTemplate,
  bodyType: p('reportsEmail.contentType')
}
]]></ee:set-payload>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="notificationPath"><![CDATA[%dw 2.0
output application/java
---
p('notification-sapi.endpoints.post.notificationPath')]]></ee:set-variable>
				<ee:set-variable variableName="notificationMethod"><![CDATA[%dw 2.0
output application/java
---
p('notification-sapi.endpoints.post.notificationMethod')]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<json-logger:logger doc:name="Before Request Log" doc:id="670834c3-32b2-42c4-b36a-6b5bd639f1b1" config-ref="JSON_Logger_Config" message="Before Request Call - notification-sapi" tracePoint="BEFORE_REQUEST" priority="DEBUG" category="${log.category}">
			<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json skipNullOn = "everywhere" ---
{
	eventContext: {
	businessID: "${global.properties.businessId}",
	source: p('notification-sapi.sourceChannel'),
	inboundUri: p('notification-sapi.endpoints.post.notificationPath'),
	method: p('notification-sapi.endpoints.post.notificationMethod'),
	muleCorrelationId:correlationId,
	logMessage: "Failure Occurred !!! Notification triggered"
},
	eventInfo: {
		payload: JSONLoggerModule::stringifyAny(payload)
}
	
}]]]></json-logger:content>
		</json-logger:logger>
		<until-successful maxRetries="${until.retries}" doc:name="Until Successful" doc:id="2dafabf4-86c3-4dd1-a493-679bddd719fc" millisBetweenRetries="${until.millisBetweenRetries}">
			<try doc:name="Try" doc:id="53614bac-d91e-4541-9160-8329c2481788" >
				<http:request method="#[vars.notificationMethod]" doc:name="Trigger notification SAPI" doc:id="ca5f8618-d601-418a-8a37-acfa1727df1a" config-ref="notificationSAPIRequestConfig" path="#[vars.notificationPath]" sendCorrelationId="ALWAYS" >
					<http:headers ><![CDATA[#[output application/java
---
{
	"client_secret" : p('secure::digigold-order-papi.clientSecret'),
	"X-Correlation-Id" : correlationId,
	"x-source-channel" : p('notification-sapi.sourceChannel'),
	"client_id" : p('secure::digigold-order-papi.clientId')
	
}]]]></http:headers>
					<http:query-params ><![CDATA[#[output application/java
---
{
	"type": p("notification-sapi.endpoints.post.queryParameter")
}]]]></http:query-params>
				</http:request>
				<error-handler ref="sapi-request-error-handler" />
			</try>
		</until-successful>
		<json-logger:logger doc:name="After Request Log" doc:id="ae049fbf-a405-42bd-bb90-ba554941f6d2" config-ref="JSON_Logger_Config" message="After Request Call - notification-sapi" tracePoint="AFTER_REQUEST" priority="DEBUG" category="${log.category}">
			<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json skipNullOn = "everywhere" ---
{
	eventContext: {
	businessID: "${global.properties.businessId}",
	source: p('notification-sapi.sourceChannel'),
	inboundUri: p('notification-sapi.endpoints.post.notificationPath'),
	method: p('notification-sapi.endpoints.post.notificationMethod'),
	muleCorrelationId:correlationId,
	logMessage: "Failure Occurred !!! Notification triggered"
},
	eventInfo: {
		payload: JSONLoggerModule::stringifyAny(payload)
}
}]]]></json-logger:content>
		</json-logger:logger>
	</sub-flow>
</mule>
