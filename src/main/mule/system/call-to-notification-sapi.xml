<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:os="http://www.mulesoft.org/schema/mule/os"
	xmlns:api-gateway="http://www.mulesoft.org/schema/mule/api-gateway"
	xmlns:outlook365="http://www.mulesoft.org/schema/mule/outlook365"
	xmlns:json-logger="http://www.mulesoft.org/schema/mule/json-logger" xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/api-gateway http://www.mulesoft.org/schema/mule/api-gateway/current/mule-api-gateway.xsd 
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd 
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/json-logger http://www.mulesoft.org/schema/mule/json-logger/current/mule-json-logger.xsd
http://www.mulesoft.org/schema/mule/outlook365 http://www.mulesoft.org/schema/mule/outlook365/current/mule-outlook365.xsd
http://www.mulesoft.org/schema/mule/os http://www.mulesoft.org/schema/mule/os/current/mule-os.xsd">

	
	  <outlook365:outlook365-config name="Outlook365_Outlook365_Config" doc:name="Outlook365 Outlook365 Config" doc:id="12d7c466-68b8-46ab-9477-7a3098c2eaa8" >
		<outlook365:oauth-client-credentials-connection >
			<outlook365:oauth-client-credentials clientId="${smtp.clientId}" clientSecret="${secure::smtp.clientsecret}" tokenUrl="https://login.microsoftonline.com/${smtp.tenantId}/oauth2/v2.0/token" scopes="https://graph.microsoft.com/.default" />
			<outlook365:oauth-store-config objectStore="Object_store" />
		</outlook365:oauth-client-credentials-connection>
	</outlook365:outlook365-config>

	<os:object-store name="Object_store" doc:name="Object store" doc:id="c9ad6ae5-6e6f-44f0-a92f-256a2d13c6bb" />
	<sub-flow name="call-notification-service" doc:id="34bda21c-f7f3-441f-9137-713f286e3548" >
		<ee:transform doc:name="Prepare notification payload" doc:id="19121a79-87c0-4edc-b6a3-a64cf8c68839">
			<ee:message>
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
import p from Mule
import toBase64 from dw::core::Binaries
---
{
  from: p('reportsEmail.from'),
  (to: (vars.emailTo splitBy  "," ) )  if (!isEmpty(vars.emailTo) ),  
  (cc: (vars.emailCC splitBy  "," ) )  if (!isEmpty(vars.emailCC) ),  				
  subject:  upper(p('env')) ++ ": "++ vars.emailSubject,
  body: vars.emailTemplate,
  bodyType: p('reportsEmail.contentType'),
  ("attachments": [{
		"name": (vars.reportType replace " " with "") ++ "s.zip",
		"content": toBase64(write(payload, "application/octet-stream")),
		"contentType": "application/zip"
	}]) if(vars.attachments == true)
}
]]></ee:set-payload>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="notificationPath"><![CDATA[%dw 2.0
output application/java
---
p('notification-sapi.endpoints.post.notificationPath')]]></ee:set-variable>
				<ee:set-variable variableName="notificationMethod"><![CDATA[%dw 2.0
output application/java
---
p('notification-sapi.endpoints.post.notificationMethod')]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<json-logger:logger doc:name="Before Request Log" doc:id="670834c3-32b2-42c4-b36a-6b5bd639f1b1" config-ref="JSON_Logger_Config" message="Before Request Call - notification-sapi" tracePoint="BEFORE_REQUEST" priority="DEBUG" category="${log.category}">
			<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json skipNullOn = "everywhere" ---
{
	eventContext: {
	businessID: "${global.properties.businessId}",
	source: p('notification-sapi.sourceChannel'),
	inboundUri: p('notification-sapi.endpoints.post.notificationPath'),
	method: p('notification-sapi.endpoints.post.notificationMethod'),
	muleCorrelationId:correlationId,
	logMessage: "Failure Occurred !!! Notification triggered"
},
	eventInfo: {
		payload: JSONLoggerModule::stringifyAny(payload)
}
	
}]]]></json-logger:content>
		</json-logger:logger>
		<choice doc:name="Choice" doc:id="25a95b57-71ee-4b47-bd95-043f1bd30284" >
			<when expression="#[vars.reportType == p('reports.transactionReport.reportType')]">
				<until-successful maxRetries="${until.retries}" doc:name="Until Successful" doc:id="eded3c62-53b3-41b3-ab48-ae9bfccd0c5f" millisBetweenRetries="${until.millisBetweenRetries}">
			<try doc:name="Try" doc:id="bc79a266-7a1f-490c-87a0-6757de25f230">
			<ee:transform doc:name="Transform Message" doc:id="463edc33-0556-4317-89f6-1428e56b936a">
							<ee:message>
								<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
"message" :{
  "subject" : payload.subject,
   "body" : {
       "contentType" : "Html",
       "content" : payload.body },
"toRecipients" : payload.to map {"emailAddress" : {"address" : $}},
(if (payload.cc != null and sizeOf(payload.cc) > 0)
  "ccRecipients" : payload.cc map {"emailAddress" : {"address" : $}}
     else {}),
(if (payload.attachments != null and sizeOf(payload.attachments) > 0)
 { "attachments" :  payload.attachments map      {
        "@odata.type": "#microsoft.graph.fileAttachment",
        "name": $.name,
        "contentType": $.contentType, //"text/plain"
        "contentBytes": $.content
      }
}
     else {})
}
}]]></ee:set-payload>
							</ee:message>
						</ee:transform>
						
						<outlook365:send-mail doc:name="Send mail" doc:id="9b7eaa4a-76f7-4e8f-8cc8-2b3b3aa4900b" config-ref="Outlook365_Outlook365_Config" userId="${smtp.username}" />
			<error-handler ref="sapi-request-error-handler" />
		</try>
		</until-successful>
			</when>
			<otherwise >
				<until-successful maxRetries="${until.retries}" doc:name="Until Successful" doc:id="da1ee9fd-e9a1-49eb-a653-9eb721538667" millisBetweenRetries="${until.millisBetweenRetries}">
			<try doc:name="Try" doc:id="bc0a51f0-bdd7-44c7-bc69-73dd380c0d5f">
				<http:request method="#[vars.notificationMethod]" doc:name="Trigger notification SAPI" doc:id="0feaff40-88f3-4667-8e6f-e3e36de88b42" config-ref="notificationSAPIRequestConfig" path="#[vars.notificationPath]" sendCorrelationId="ALWAYS">
					<http:headers><![CDATA[#[import p from Mule
output application/java
---
{
	"client_secret" : p('secure::digigold-order-papi.clientSecret'),
	"X-Correlation-Id" : correlationId,
	"x-source-channel" : p('notification-sapi.sourceChannel'),
	"client_id" : p('secure::digigold-order-papi.clientId')
	
}]]]></http:headers>
					<http:query-params><![CDATA[#[output application/java
---
{
	"type": p("notification-sapi.endpoints.post.queryParameter")
}]]]></http:query-params>
				</http:request>
				<error-handler ref="sapi-request-error-handler" />
			</try>
		</until-successful>
			</otherwise>
		</choice>
		<json-logger:logger doc:name="After Request Log" doc:id="ae049fbf-a405-42bd-bb90-ba554941f6d2" config-ref="JSON_Logger_Config" message="After Request Call - notification-sapi" tracePoint="AFTER_REQUEST" priority="DEBUG" category="${log.category}">
			<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json skipNullOn = "everywhere" ---
{
	eventContext: {
	businessID: "${global.properties.businessId}",
	source: p('notification-sapi.sourceChannel'),
	inboundUri: p('notification-sapi.endpoints.post.notificationPath'),
	method: p('notification-sapi.endpoints.post.notificationMethod'),
	muleCorrelationId:correlationId,
	logMessage: "Failure Occurred !!! Notification triggered"
},
	eventInfo: {
		payload: JSONLoggerModule::stringifyAny(payload)
}
}]]]></json-logger:content>
		</json-logger:logger>
	</sub-flow>
</mule>
