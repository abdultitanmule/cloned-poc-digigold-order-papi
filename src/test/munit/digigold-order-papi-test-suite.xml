<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="digigold-order-papi-test-suite.xml" />
	<munit:test name="digigold-order-papi-test-suite-post:\reports:application\json:digigold-order-papi-success-test-case" doc:id="a67ad211-7893-4b07-9f19-ae1f9fb32511" description="Test">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock apikit router" doc:id="f0c59355-d2e5-426e-9dd4-69d9218c6e04" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="digigold-order-papi-config" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-call flow="post:\reports:application\json:digigold-order-papi-config" />
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock Call to dynamo-sapi" doc:id="44cb615f-cb15-408f-afca-ea85aae41fa2" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Request to dynamo-sapi" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="dynamoSAPIRequestConfig" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[output application/json --- readUrl("classpath://input/dynamo-sapi-success-response.json")]' mediaType="application/json" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock call to VM" doc:id="e6c5a525-4cdb-47b7-a8af-25396e2894d4" processor="vm:publish">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Publish Dynamo  Response" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="oracleExtractQueue" attributeName="queueName" />
					<munit-tools:with-attribute whereValue="transactions_vm_Config" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[output application/json --- readUrl("classpath://input/dynamo-sapi-success-response.json")]' mediaType="application/json" />
				</munit-tools:then-return>
				<munit-tools:then-call flow="listen-dynamo-response" />
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock call to sftp-sapi" doc:id="f2c1e8b5-a8fa-4bdf-930d-c020dff5e5fa" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Request" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="sftpSAPIRequestConfig" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[output application/json --- readUrl("classpath://input/sftp-sapi-success-response.json")]' />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock create directory" doc:id="de0612fe-b10e-4cdc-9212-5b89bc86770e" processor="sftp:create-directory" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Create directory for Report Generation" attributeName="doc:name" />
				</munit-tools:with-attributes>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock call to notification-sapi" doc:id="14f1a651-aae7-48b9-a33f-a78d0164786b" processor="http:request" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Trigger notification SAPI" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="notificationSAPIRequestConfig" attributeName="config-ref" />
				</munit-tools:with-attributes>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Event" doc:id="d38ad594-7285-4285-906e-0fc0b05c9182" >
				<munit:payload value="#[MunitTools::getResourceAsString('input/oracle-report-post-request.json')]" mediaType="application/json" />
			</munit:set-event>
			<flow-ref doc:name="Flow-ref to post:\reports:application\json:digigold-order-papi-config" doc:id="b14f94e6-2eae-4816-9187-2368cb3f4654" name="post:\reports:application\json:digigold-order-papi-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:verify-call doc:name="Verify call to Report generation transfom" doc:id="174508fc-c244-4223-b539-39a2efe44cf7" processor="ee:transform" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Pipe delimited data for report" attributeName="doc:name" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="digigold-order-papi-test-suite-post:\reports:application\json:digigold-order-papi-pagination-success-test-case" doc:id="b1b9ddd5-be13-47b7-bb15-0bb7167fc363" description="Test" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock apikit router" doc:id="8ea5888b-7f5c-44ab-ae8d-93acc20217bb" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="digigold-order-papi-config" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-call flow="post:\reports:application\json:digigold-order-papi-config" />
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock Call to dynamo-sapi" doc:id="2e3f522b-f3b4-45c1-bccc-ebd4671d9797" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Request to dynamo-sapi" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="dynamoSAPIRequestConfig" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[output application/json --- readUrl("classpath://input/dynamo-sapi-pagination-success-response.json")]' mediaType="application/json" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock call to VM" doc:id="613f9c57-4ead-44b7-883b-fbfd06f496f6" processor="vm:publish">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Publish Dynamo  Response" attributeName="doc:name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[output application/json --- readUrl("classpath://input/dynamo-sapi-pagination-success-response.json")]' mediaType="application/json" />
				</munit-tools:then-return>
				<munit-tools:then-call flow="listen-dynamo-response" />
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock call to sftp-sapi" doc:id="05d40297-0542-4116-b19e-87588ade47c8" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Request" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="sftpSAPIRequestConfig" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[output application/json --- readUrl("classpath://input/sftp-sapi-success-response.json")]' />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock call to dynamo sapi - listner flow" doc:id="dc1300ea-0efd-4b5f-9b88-8b013bd3de3b" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="recall to dynamo-sapi" attributeName="doc:name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[output application/json --- readUrl("classpath://input/dynamo-sapi-success-response.json")]' mediaType="application/json" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock republish to vm" doc:id="8ce40a80-61d7-43f5-b2ac-ce3c1d17ad9e" processor="vm:publish">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Republish Dynamo  Response" attributeName="doc:name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[output application/json --- readUrl("classpath://input/dynamo-sapi-success-response.json")]' mediaType="application/json" />
				</munit-tools:then-return>
				<munit-tools:then-call flow="listen-dynamo-response" />
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock create directory" doc:id="b829ff68-76e9-4404-ad07-438d8381e7b1" processor="sftp:create-directory">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Create directory for Report Generation" attributeName="doc:name" />
				</munit-tools:with-attributes>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Event" doc:id="1a7bd1f3-8ae8-4ed7-9ca5-e984d95587e4" >
				<munit:payload value="#[MunitTools::getResourceAsString('input/oracle-report-post-request.json')]" mediaType="application/json" />
			</munit:set-event>
			<flow-ref doc:name="Flow-ref to post:\reports:application\json:digigold-order-papi-config" doc:id="2b93a117-b40c-41ed-ac93-1a55cc522543" name="post:\reports:application\json:digigold-order-papi-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:verify-call doc:name="Verify call" doc:id="a2b33fc2-c971-4950-ba38-658df780b93b" processor="ee:transform" atLeast="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="AggregatedPayload" attributeName="doc:name" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
			<munit-tools:verify-call doc:name="Verify call to Report generation transfom" doc:id="7974a3e0-47cd-4787-9d93-c4a88f4d43ad" processor="ee:transform" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Pipe delimited data for report" attributeName="doc:name" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="digigold-order-papi-test-suite-post:\reports:application\json:digigold-order-papi-zero-records-failure-test-case" doc:id="41efba54-e3b9-4a1d-92a9-c5723c0b4645" description="Test">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock apikit router" doc:id="ea245e1c-9cb7-4a37-9141-14913c56463e" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="digigold-order-papi-config" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-call flow="post:\reports:application\json:digigold-order-papi-config" />
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock Call to dynamo-sapi" doc:id="57bfd477-9dd5-48c4-805c-421ec9469963" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Request to dynamo-sapi" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="dynamoSAPIRequestConfig" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[output application/json --- readUrl("classpath://input/dynamo-sapi-zero-records-success-response.json")]' mediaType="application/json" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock call to VM" doc:id="a0e35e83-93b5-44c7-a987-c339fe57be41" processor="vm:publish">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Publish Dynamo  Response" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="oracleExtractQueue" attributeName="queueName" />
					<munit-tools:with-attribute whereValue="transactions_vm_Config" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[output application/json --- readUrl("classpath://input/dynamo-sapi-zero-records-success-response.json")]' mediaType="application/json" />
				</munit-tools:then-return>
				<munit-tools:then-call flow="listen-dynamo-response" />
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock call to notification-sapi" doc:id="5002e29a-b1ed-4665-9a9a-6535066fc226" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Trigger notification SAPI" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="notificationSAPIRequestConfig" attributeName="config-ref" />
				</munit-tools:with-attributes>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Event" doc:id="c6ca76ea-86fa-407d-bfba-d930d98a394f" >
				<munit:payload value="#[MunitTools::getResourceAsString('input/oracle-report-post-request.json')]" mediaType="application/json" />
			</munit:set-event>
			<flow-ref doc:name="Flow-ref to post:\reports:application\json:digigold-order-papi-config" doc:id="0768e44f-2e00-49fb-80da-d69220c57bfd" name="post:\reports:application\json:digigold-order-papi-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:verify-call doc:name="Verify call to Report generation transfom" doc:id="3bf64853-0bd2-49af-bee7-38695239e325" processor="ee:transform" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Set notification params" attributeName="doc:name" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="digigold-order-papi-test-suite-post:\reports:application\json:digigold-order-papi-sapiConnectivity-failure-test-case" doc:id="0800fd74-d609-498b-8fe3-c0bdbc36fe84" description="Test">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock apikit router" doc:id="a92f3519-236e-4941-b354-d038c4937c74" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="digigold-order-papi-config" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-call flow="post:\reports:application\json:digigold-order-papi-config" />
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock Call to dynamo-sapi" doc:id="7286de6b-527f-4f67-a238-ccc0861b21d5" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Request to dynamo-sapi" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="dynamoSAPIRequestConfig" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[output application/json --- readUrl("classpath://input/dynamo-sapi-zero-records-success-response.json")]' mediaType="application/json" />
					<munit-tools:error typeId="HTTP:CONNECTIVITY" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock call to notification-sapi" doc:id="e14ef3c8-00f2-4ba4-89e3-bbf512e90aa1" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Trigger notification SAPI" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="notificationSAPIRequestConfig" attributeName="config-ref" />
				</munit-tools:with-attributes>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Event" doc:id="8e0600dd-f523-4d58-b69b-1c13beeb0451" >
				<munit:payload value="#[MunitTools::getResourceAsString('input/oracle-report-post-request.json')]" mediaType="application/json" />
			</munit:set-event>
			<flow-ref doc:name="Flow-ref to post:\reports:application\json:digigold-order-papi-config" doc:id="814dc093-68e7-476f-8add-30633d4c842d" name="post:\reports:application\json:digigold-order-papi-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:verify-call doc:name="Verify call to on error continue Scenario" doc:id="476d9e64-45d3-42e7-bfab-42e9278a1928" processor="ee:transform" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="set email params" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="80360232-713e-4c63-bec4-0b562c8fb605" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
			<munit-tools:verify-call doc:name="Verify call to error-handler" doc:id="da277f34-4934-4073-90b2-8b71276c972e" processor="set-variable" atLeast="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Set Successful" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="ea1150f3-c964-4a7d-a63f-ae5735eb86fa" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="digigold-order-papi-test-suite-post:\reports:application\json:digigold-order-papi-sapiANY-failure-test-case" doc:id="90e8bf0f-7a7d-4bb1-9797-da0596815a3e" description="Test">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock apikit router" doc:id="2af637cf-5727-441d-b3c6-1eff5ce3b59b" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="digigold-order-papi-config" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-call flow="post:\reports:application\json:digigold-order-papi-config" />
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock Call to dynamo-sapi" doc:id="b9688d65-e175-41a9-aaf8-9973a333a769" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Request to dynamo-sapi" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="dynamoSAPIRequestConfig" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[output application/json --- readUrl("classpath://input/dynamo-sapi-zero-records-success-response.json")]' mediaType="application/json" />
					<munit-tools:error typeId="ANY" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock call to notification-sapi" doc:id="f88f022e-82b7-4c7c-b291-8375a9bd2fee" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Trigger notification SAPI" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="notificationSAPIRequestConfig" attributeName="config-ref" />
				</munit-tools:with-attributes>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Event" doc:id="d535a004-9ee0-4ef9-9713-b378cd013093" >
				<munit:payload value="#[MunitTools::getResourceAsString('input/oracle-report-post-request.json')]" mediaType="application/json" />
			</munit:set-event>
			<flow-ref doc:name="Flow-ref to post:\reports:application\json:digigold-order-papi-config" doc:id="74382f8e-821e-4de6-ba85-8d4f42a13e4a" name="post:\reports:application\json:digigold-order-papi-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:verify-call doc:name="Verify call to on error continue Scenario" doc:id="a09f4fca-d65b-498b-9991-597605c123bd" processor="ee:transform" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="set email params" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="80360232-713e-4c63-bec4-0b562c8fb605" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
			<munit-tools:verify-call doc:name="Verify call to error-handler" doc:id="c7c974f7-4f0f-421a-bb30-ceec8f594b57" processor="ee:transform" atLeast="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Set Error Payload" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="8d4d963f-6c62-4eb0-8463-aa52a10eca34" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>

</mule>
